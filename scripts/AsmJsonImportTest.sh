#!/usr/bin/env bash

set -e

# Bash script to test the asm-json-import input mode of the compiler by
# first exporting a .sol file to JSON that containing assembly json and corresponding bytecode,
# then the compiler is invoked in assembly json import mode `--import-asm-json` and uses the previously
# generated assembly json as input, where the corresponding bytecode output will be stored.
# Finally, the originally generated bytecode will be compared with the one that was generated by using the
# assembly json file as input.
READLINK=readlink
if [[ "$OSTYPE" == "darwin"* ]]; then
    READLINK=greadlink
fi
REPO_ROOT=$(${READLINK} -f "$(dirname "$0")"/..)
SOLIDITY_BUILD_DIR=${SOLIDITY_BUILD_DIR:-${REPO_ROOT}/build}
SOLC=${SOLIDITY_BUILD_DIR}/solc/solc
SPLITSOURCES=${REPO_ROOT}/scripts/splitSources.py

SEMANTICTESTS_DIR="${REPO_ROOT}/test/libsolidity/semanticTests"
NSOURCES="$(find "$SEMANTICTESTS_DIR" -type f | wc -l)"

# DEV_DIR="${REPO_ROOT}/../tmp/contracts/"
# NSOURCES="$(find $DEV_DIR -type f | wc -l)" #TODO use find command

FAILED=0
UNCOMPILABLE=0
TESTED=0

if [[ "$(find . -maxdepth 0 -type d -empty)" == "" ]]; then
    echo "Test directory not empty. Skipping!"
    exit 1
fi

# function tests whether importing an assembly json file creates identical bytecode.
# Results are recorded by adding to FAILED or UNCOMPILABLE.
# Also, in case of a mismatch a diff and the respective ASTs are printed
# Expected parameters:
# $1 name of the file to be exported and imported
# $2 any files needed to do so that might be in parent directories
function testImportExportEquivalence {
    local nth_input_file="$1"
    IFS=" " read -r -a all_input_files <<< "$2"

    if $SOLC "$nth_input_file" "${all_input_files[@]}" > /dev/null 2>&1
    then
        # save exported json as expected result (silently)
        $SOLC --combined-json asm,bin,compact-format --pretty-json "$nth_input_file" "${all_input_files[@]}" > expected.json 2> /dev/null
        for contract in $(jq '.contracts | keys' expected.json | jq '.[]' 2> /dev/null)
        do
            jq ".contracts.${contract}.asm" expected.json > asm.json 2> /dev/null
            jq ".contracts.${contract}.bin" expected.json | jq --raw-output '.' > expected.bin 2> /dev/null
            expected_bin=$(cat expected.bin)
            if [ -z "$expected_bin" ]
            then
              continue
            fi

            if ! $SOLC --import-asm-json asm.json --bin > obtained.bin 2> /dev/null
            then
                # For investigating, use exit 1 here so the script stops at the
                # first failing test
                # exit 1
                echo ""
                echo "Failed with contract ${contract}."
                echo ""
                FAILED=$((FAILED + 1))
                return 1
            fi

            bin=$(tail -n +2 "obtained.bin" | grep -v '//')
            echo "$bin" > obtained.bin
            if ! diff expected.bin obtained.bin
            then
                echo ""
                echo "Failed with contract ${contract}."
                echo ""
                if [ "$DIFFVIEW" == "" ]
                then
                    echo "Expected:"
                    cat ./expected.bin
                    echo "Obtained:"
                    cat ./obtained.bin
                else
                    # Use user supplied diff view binary
                    $DIFFVIEW expected.bin obtained.bin
                fi
                FAILED=$((FAILED + 1))
                return 2
            fi
        done
        TESTED=$((TESTED + 1))
        rm -f expected.json asm.json expected.bin obtained.bin
    else
        # echo "contract $solfile could not be compiled "
        UNCOMPILABLE=$((UNCOMPILABLE + 1))
    fi
    # return 0
}
echo "Looking at $NSOURCES .sol files..."

WORKINGDIR=$PWD

# shellcheck disable=SC2044
for solfile in $(find "$SEMANTICTESTS_DIR" -name "*.sol")
do
    echo -n "."
    # create a temporary sub-directory
    FILETMP=$(mktemp -d)
    cd "$FILETMP"

    set +e
    OUTPUT=$("$SPLITSOURCES" "$solfile")
    SPLITSOURCES_RC=$?
    set -e
    if [ ${SPLITSOURCES_RC} == 0 ]
    then
        # echo $OUTPUT
        NSOURCES=$((NSOURCES - 1))
        for i in $OUTPUT;
        do
            testImportExportEquivalence "$i" "$OUTPUT"
            NSOURCES=$((NSOURCES + 1))
        done
    elif [ ${SPLITSOURCES_RC} == 1 ]
    then
        testImportExportEquivalence "$solfile"
    elif [ ${SPLITSOURCES_RC} == 2 ]
    then
        # The script will exit with return code 2, if an UnicodeDecodeError occurred.
        # This is the case if e.g. some tests are using invalid utf-8 sequences. We will ignore
        # these errors, but print the actual output of the script.
        echo -e "\n${OUTPUT}\n"
        testImportExportEquivalence "$solfile"
    else
        # All other return codes will be treated as critical errors. The script will exit.
        echo -e "\nGot unexpected return code ${SPLITSOURCES_RC} from ${SPLITSOURCES}. Aborting."
        echo -e "\n${OUTPUT}\n"

        cd "$WORKINGDIR"
        # Delete temporary files
        rm -rf "$FILETMP"

        exit 1
    fi

    cd "$WORKINGDIR"
    # Delete temporary files
    rm -rf "$FILETMP"
done

echo ""

if [ "$FAILED" = 0 ]
then
    echo "SUCCESS: $TESTED tests passed, $FAILED failed, $UNCOMPILABLE could not be compiled ($NSOURCES sources total)."
else
    echo "FAILURE: Out of $NSOURCES sources, $FAILED failed, ($UNCOMPILABLE could not be compiled)."
    exit 1
fi
